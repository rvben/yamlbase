name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  # Note: Integration tests should be run locally before creating a release
  # Use 'make integration-test' and 'make coverage-full' to run all tests
  
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  build-binaries:
    name: Build Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: yamlbase
            asset_name: yamlbase-linux-amd64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: yamlbase
            asset_name: yamlbase-linux-musl-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: yamlbase
            asset_name: yamlbase-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: yamlbase.exe
            asset_name: yamlbase-windows-amd64.exe
          - os: macos-14
            target: x86_64-apple-darwin
            artifact_name: yamlbase
            asset_name: yamlbase-macos-amd64
          - os: macos-14
            target: aarch64-apple-darwin
            artifact_name: yamlbase
            asset_name: yamlbase-macos-arm64
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl-tools (Linux)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          make build-target TARGET=${{ matrix.target }}
        shell: bash

      - name: Rename binary
        run: |
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
        shell: bash

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: ${{ matrix.asset_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: make publish-crate
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  publish-docker:
    name: Publish Docker Images
    needs: build-binaries
    runs-on: ubuntu-latest
    # Note: If this fails with 403, check package settings at:
    # https://github.com/users/rvben/packages/container/yamlbase/settings
    # Under "Manage Actions access", add this repository
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download release binaries
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ github.repository }}
          tag: ${{ github.ref_name }}
          fileName: "yamlbase-linux-*"
          out-file-path: "binaries"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Docker contexts
        run: |
          # Create contexts for each architecture
          mkdir -p docker-amd64 docker-arm64
          cp Dockerfile.binary docker-amd64/Dockerfile
          cp Dockerfile.binary docker-arm64/Dockerfile
          cp binaries/yamlbase-linux-amd64 docker-amd64/yamlbase
          cp binaries/yamlbase-linux-arm64 docker-arm64/yamlbase
          chmod +x docker-amd64/yamlbase docker-arm64/yamlbase

      - name: Build and push AMD64 image
        uses: docker/build-push-action@v5
        with:
          context: docker-amd64
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/rvben/yamlbase:${{ steps.version.outputs.version }}-amd64
            docker.io/rvben/yamlbase:${{ steps.version.outputs.version }}-amd64

      - name: Build and push ARM64 image
        uses: docker/build-push-action@v5
        with:
          context: docker-arm64
          platforms: linux/arm64
          push: true
          tags: |
            ghcr.io/rvben/yamlbase:${{ steps.version.outputs.version }}-arm64
            docker.io/rvben/yamlbase:${{ steps.version.outputs.version }}-arm64

      - name: Create and push multi-arch manifest
        run: |
          # Create multi-arch manifests for ghcr.io
          docker buildx imagetools create -t ghcr.io/rvben/yamlbase:${{ steps.version.outputs.version }} \
            ghcr.io/rvben/yamlbase:${{ steps.version.outputs.version }}-amd64 \
            ghcr.io/rvben/yamlbase:${{ steps.version.outputs.version }}-arm64
          
          docker buildx imagetools create -t ghcr.io/rvben/yamlbase:latest \
            ghcr.io/rvben/yamlbase:${{ steps.version.outputs.version }}-amd64 \
            ghcr.io/rvben/yamlbase:${{ steps.version.outputs.version }}-arm64
          
          # Create multi-arch manifests for docker.io
          docker buildx imagetools create -t docker.io/rvben/yamlbase:${{ steps.version.outputs.version }} \
            docker.io/rvben/yamlbase:${{ steps.version.outputs.version }}-amd64 \
            docker.io/rvben/yamlbase:${{ steps.version.outputs.version }}-arm64
          
          docker buildx imagetools create -t docker.io/rvben/yamlbase:latest \
            docker.io/rvben/yamlbase:${{ steps.version.outputs.version }}-amd64 \
            docker.io/rvben/yamlbase:${{ steps.version.outputs.version }}-arm64